<script>
        var taskInput = document.getElementById("new-task");
        var addButton = document.getElementsByTagName("button")[0];
        var incompleteTasksHolder = document.getElementById("incomplete-tasks");
        var completedTasksHolder = document.getElementById("completed-tasks");

        var createNewTaskElement = function(taskString, arr) {
          listItem = document.createElement("li");
          checkBox = document.createElement("input");
          label = document.createElement("label");
          editInput = document.createElement("input");
          editButton = document.createElement("button");
          deleteButton = document.createElement("button");

          label.innerText = taskString;
          
          checkBox.type = "checkbox";
          editInput.type = "text";
          editButton.innerText = "Edit";
          editButton.className = "edit";
          deleteButton.innerText = "Delete";
          deleteButton.className = "delete";
          

          listItem.appendChild(checkBox);
          listItem.appendChild(label);
          listItem.appendChild(editInput);
          listItem.appendChild(editButton);
          listItem.appendChild(deleteButton);

          return listItem;
        };

        var addTask = function () {
          var listItemName = taskInput.value || "New Item"
          listItem = createNewTaskElement(listItemName)
          incompleteTasksHolder.appendChild(listItem)
          bindTaskEvents(listItem, taskCompleted)
          taskInput.value = "";
        };

        var editTask = function () {
          var listItem = this.parentNode;
          var editInput = listItem.querySelectorAll("input[type=text")[0];
          var label = listItem.querySelector("label");
          var button = listItem.getElementsByTagName("button")[0];

          var containsClass = listItem.classList.contains("editMode");
          if (containsClass) {
              label.innerText = editInput.value
              button.innerText = "Edit";
          } else {
             editInput.value = label.innerText
             button.innerText = "Save";
          }
          
          listItem.classList.toggle("editMode");
        };

        var deleteTask = function (el) {
          var listItem = this.parentNode;
          var ul = listItem.parentNode;
          ul.removeChild(listItem);
        };

        var taskCompleted = function (el) {
          var listItem = this.parentNode;
          completedTasksHolder.appendChild(listItem);
          bindTaskEvents(listItem, taskIncomplete);
        };

        var taskIncomplete = function() {
          var listItem = this.parentNode;
          incompleteTasksHolder.appendChild(listItem);
          bindTaskEvents(listItem, taskCompleted);
        };

        var bindTaskEvents = function(taskListItem, checkBoxEventHandler, cb) {
          var checkBox = taskListItem.querySelectorAll("input[type=checkbox]")[0];
          var editButton = taskListItem.querySelectorAll("button.edit")[0];
          var deleteButton = taskListItem.querySelectorAll("button.delete")[0];
          editButton.onclick = editTask;
          deleteButton.onclick = deleteTask;
          checkBox.onchange = checkBoxEventHandler;
        };

        addButton.addEventListener("click", addTask);

        for (var i = 0; i < incompleteTasksHolder.children.length; i++) {
          bindTaskEvents(incompleteTasksHolder.children[i], taskCompleted);
        }

        for (var i = 0; i < completedTasksHolder.children.length; i++) {
          bindTaskEvents(completedTasksHolder.children[i], taskIncomplete);
        }
      </script>



      <script>
        fetch(' https://5dc588200bbd050014fb8ae1.mockapi.io/assessment')
        .then(response => response.json())
        .then(data => console.log(data));
        //var mydata = JSON.parse(data);

        function saveStuff(obj) {
        saveData.obj = obj;
        // saveData.foo = foo;
        localStorage.saveData = JSON.stringify(saveData);
}


    </script>


    <table>
            <tbody>
                {{#each this}}
                <tr>
                    <td>{{avatar}}
                        <ul>
                            
                                <li>{{id}}</li>
                                <li>{{createdAt}}</li>
                                <li>{{name}}</li>
                                
                      
                        </ul>
                </td>
                <td>{{email}}</td>
                </tr>
                {{/each}}
            </tbody> 
            
        </table>

         <div class="details">
                <br><br>
                <div class="avatar-clm">
                    <table>
                        <tbody>
                    <tr><img src="{{avatar}}"></tr>
                    <tr><h2>{{name}}</h2></tr>
                        </tbody>
                    </table>
                </div>                
                <div class="info-clm">
                    
                    <li>{{id}}</li>
                    <li>{{createdAt}}</li>
                </div>
            </div>




const express= require("express");
const app=express();

app.use(express.static(__dirname+"/src"));
app.get("/", (req, res)=>{
  res.sendFile(__dirname+"/src/index.html");
});

const port=3000
app.listen(port, ()=>console.log(`this app is listening on port ${port}`));